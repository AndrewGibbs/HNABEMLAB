function sigma = hoi_asy_sigma(fdata, gdata, n)
%function sigma = hoi_asy_sigma(fdata, gdata, n)
%
%   Compute the functions sigma for the asymptotic method at a
%   regular point. The value of sigma_n requires derivatives up
%   to order n for f, and up to order n+1 for g.
%
%   The maximal value of n is 10.

% $Id: hoi_asy_sigma.m 2 2006-11-03 09:18:49Z daan $


% Implementation note:
% These expressions were derived in Maple.

sigma = zeros(n+1, 1);

a0 = fdata(1);
b1 = gdata(2);

sigma(1) = a0;

if n >= 1
    a1 = fdata(2);
    b2 = gdata(3);
    sigma(2) = a1/b1-a0*b2/b1^2;
end

if n >= 2
    a2 = fdata(3);
    b3 = gdata(4);
    sigma(3) = (a2*b1^2-3*a1*b2*b1+3*a0*b2^2-a0*b3*b1)/b1^4;
end

if n >= 3
    a3 = fdata(4);
    b4 = gdata(5);
    sigma(4) = -(-a3*b1^3+6*a2*b2*b1^2-15*a1*b2^2*b1+4*a1*b3*b1^2+15*a0*b2^3-10*a0*b2*b3*b1+a0*b4*b1^2)/b1^6;
end

if n >= 4
    a4 = fdata(5);
    b5 = gdata(6);
    sigma(5) = (-10*a3*b2*b1^3+105*a0*b2^4+a4*b1^4+45*a2*b2^2*b1^2-10*a2*b3*b1^3-105*a1*b2^3*b1-5*a1*b4*b1^3+10*a0*b3^2*b1^2-a0*b5*b1^3+60*a1*b2*b3*b1^2-105*a0*b2^2*b3*b1+15*a0*b2*b4*b1^2)/b1^8;
end

if n >= 5
    a5 = fdata(6);
    b6 = gdata(7);
    sigma(6) = -(20*a3*b3*b1^4+15*a2*b4*b1^4+6*a1*b5*b1^4+a0*b6*b1^4-105*a3*b2^2*b1^3-945*a1*b2^4*b1-70*a1*b3^2*b1^3+15*a4*b2*b1^4+945*a0*b2^5+420*a2*b2^3*b1^2-a5*b1^5-210*a2*b2*b3*b1^3+280*a0*b2*b3^2*b1^2+840*a1*b2^2*b3*b1^2-105*a1*b2*b4*b1^3-1260*a0*b2^3*b3*b1+210*a0*b2^2*b4*b1^2-35*a0*b3*b4*b1^3-21*a0*b2*b5*b1^3)/b1^10;
end

if n >= 6
    a6 = fdata(7);
    b7 = gdata(8);
    sigma(7) = (10395*a0*b2^6+a6*b1^6-1260*a0*b2*b3*b4*b1^3+6300*a0*b2^2*b3^2*b1^2-3780*a2*b2^2*b3*b1^3+560*a3*b2*b3*b1^4+420*a2*b2*b4*b1^4-2520*a1*b2*b3^2*b1^3+168*a1*b5*b2*b1^4+28*a0*b6*b2*b1^4+12600*a1*b2^3*b3*b1^2-1890*a1*b2^2*b4*b1^3+280*a1*b3*b4*b1^4-17325*a0*b2^4*b3*b1+3150*a0*b2^3*b4*b1^2-378*a0*b2^2*b5*b1^3+56*a0*b3*b5*b1^4-1260*a3*b2^3*b1^3-21*a5*b2*b1^5-35*a4*b3*b1^5-35*a3*b4*b1^5+210*a4*b2^2*b1^4-a0*b7*b1^5-7*a1*b6*b1^5-21*a2*b5*b1^5+4725*a2*b2^4*b1^2+280*a2*b3^2*b1^4-280*a0*b3^3*b1^3+35*a0*b4^2*b1^4-10395*a1*b2^5*b1)/b1^12;
end

if n >= 7
    a7 = fdata(8);
    b8 = gdata(9);
    sigma(8) = -(135135*a0*b2^7+1575*a0*b2*b4^2*b1^4-34650*a0*b2^2*b3*b4*b1^3+2100*a0*b3^2*b4*b1^4+28*a2*b6*b1^6+56*a3*b5*b1^6+8*a1*b7*b1^6+28*a6*b2*b1^6+56*a5*b3*b1^6+3150*a4*b2^3*b1^4+70*a4*b4*b1^6+a0*b8*b1^6-378*a5*b2^2*b1^5-17325*a3*b2^4*b1^3-840*a3*b3^2*b1^5+62370*a2*b2^5*b1^2-315*a1*b4^2*b1^5-135135*a1*b2^6*b1+2800*a1*b3^3*b1^4+12600*a2*b2*b3^2*b1^4+3780*a1*b5*b2^2*b1^4+630*a0*b6*b2^2*b1^4-252*a1*b6*b2*b1^5-15400*a0*b2*b3^3*b1^3-126*a0*b4*b5*b1^5-756*a2*b5*b2*b1^5+138600*a0*b2^3*b3^2*b1^2+12600*a3*b2^2*b3*b1^4-1260*a4*b3*b2*b1^5-1260*a3*b4*b2*b1^5-36*a0*b7*b2*b1^5-69300*a1*b2^2*b3^2*b1^3-69300*a2*b2^3*b3*b1^3+9450*a2*b2^2*b4*b1^4-1260*a2*b3*b4*b1^5-504*a1*b5*b3*b1^5-84*a0*b6*b3*b1^5+12600*a1*b2*b3*b4*b1^4+2520*a0*b2*b3*b5*b1^4+207900*a1*b2^4*b3*b1^2-34650*a1*b2^3*b4*b1^3-270270*a0*b2^5*b3*b1+51975*a0*b2^4*b4*b1^2-6930*a0*b2^3*b5*b1^3)/b1^14;
end

if n >= 8
    a8 = fdata(9);
    b9 = gdata(10);
    sigma(9) = -(-a8*b1^8-2100*a4*b3^2*b1^6+270270*a3*b2^5*b1^3-15400*a0*b3^4*b1^4+15400*a2*b3^3*b1^5-1575*a2*b4^2*b1^6-126*a0*b5^2*b1^6+6930*a5*b2^3*b1^5-630*a6*b2^2*b1^6-51975*a4*b2^4*b1^4+36*a7*b2*b1^7+84*a3*b6*b1^7+84*a6*b3*b1^7+36*a2*b7*b1^7+a0*b9*b1^7+9*a1*b8*b1^7+126*a5*b4*b1^7+126*a4*b5*b1^7+2027025*a1*b2^7*b1-945945*a2*b2^6*b1^2-2027025*a0*b2^8+17325*a1*b2*b4^2*b1^5+23100*a1*b3^2*b4*b1^5+69300*a2*b2*b3*b4*b1^5+4620*a0*b3*b6*b2*b1^5+6930*a0*b4*b5*b2*b1^5-277200*a3*b2^3*b3*b1^4+4620*a0*b3^2*b5*b1^5+6930*a1*b6*b2^2*b1^5+900900*a0*b2^3*b4*b3*b1^3-840*a1*b6*b3*b1^6+990*a0*b7*b2^2*b1^5-2520*a2*b5*b3*b1^6-120*a0*b7*b3*b1^6+600600*a0*b2^2*b3^3*b1^3+20790*a2*b5*b2^2*b1^5-51975*a0*b2^2*b4^2*b1^4-138600*a0*b2*b3^2*b4*b1^4-13860*a0*b2^3*b6*b1^4-3783780*a1*b2^5*b3*b1^2-83160*a0*b2^2*b5*b3*b1^4+135135*a0*b2^4*b5*b1^3+5775*a0*b3*b4^2*b1^5-83160*a1*b2^3*b5*b1^4-2520*a3*b5*b2*b1^6-3150*a4*b4*b2*b1^6-2520*a5*b2*b3*b1^6-945945*a0*b2^5*b4*b1^2-3153150*a0*b2^4*b3^2*b1^2+4729725*a0*b2^6*b3*b1-1260*a1*b5*b4*b1^6-4200*a3*b4*b3*b1^6+1801800*a1*b2^3*b3^2*b1^3+46200*a3*b3^2*b2*b1^5-415800*a2*b2^2*b3^2*b1^4-45*a0*b8*b2*b1^6-360*a1*b7*b2*b1^6-1260*a2*b6*b2*b1^6-415800*a1*b2^2*b3*b4*b1^4-184800*a1*b2*b3^3*b1^4-210*a0*b4*b6*b1^6+34650*a3*b4*b2^2*b1^5+34650*a4*b3*b2^2*b1^5-207900*a2*b2^3*b4*b1^4+675675*a1*b2^4*b4*b1^3+1351350*a2*b2^4*b3*b1^3+27720*a1*b2*b3*b5*b1^5)/b1^16;
end

if n >= 9
    a9 = fdata(10);
    b10 = gdata(11);
    sigma(10) = -(34459425*a0*b2^9+16216200*a2*b2^7*b1^2+61600*a3*b3^3*b1^6-200200*a1*b3^4*b1^5-5775*a3*b4^2*b1^7-34459425*a1*b2^8*b1-990*a7*b2^2*b1^7+45*a8*b2*b1^8+120*a7*b3*b1^8+5775*a0*b4^3*b1^6-1386*a1*b5^2*b1^7+13860*a6*b2^3*b1^6-135135*a5*b2^4*b1^5-4620*a5*b3^2*b1^7+210*a4*b6*b1^8+120*a3*b7*b1^8+45*a2*b8*b1^8+10*a1*b9*b1^8+a0*b10*b1^8+252*a5*b5*b1^8+945945*a4*b2^5*b1^4-4729725*a3*b2^6*b1^3+210*a6*b4*b1^8+12612600*a1*b2^3*b3*b4*b1^4-1801800*a1*b2*b3^2*b4*b1^5-1081080*a1*b2^2*b3*b5*b1^5+166320*a2*b2*b3*b5*b1^6+12612600*a2*b2^3*b3^2*b1^4+103950*a4*b4*b2^2*b1^6+277200*a3*b4*b3*b2*b1^6-55*a0*b9*b2*b1^7-165*a0*b8*b3*b1^7-1801800*a3*b2^2*b3^2*b1^5-900900*a4*b2^3*b3*b1^5-28378350*a2*b2^5*b3*b1^3-2702700*a2*b2^2*b3*b4*b1^5+83160*a3*b5*b2^2*b1^6+41580*a2*b6*b2^2*b1^6-1980*a2*b7*b2*b1^7-4620*a2*b6*b3*b1^7-495*a1*b8*b2*b1^7-1320*a1*b7*b3*b1^7+13860*a0*b4*b6*b2*b1^6-270270*a0*b4*b5*b2^2*b1^5+27720*a0*b4*b5*b3*b1^6-180180*a0*b3*b6*b2^2*b1^5+7920*a0*b3*b7*b2*b1^6-360360*a0*b3^2*b5*b2*b1^5+9240*a0*b3^2*b6*b1^6+1576575*a0*b2^3*b4^2*b1^4-180180*a1*b6*b2^3*b1^5+6306300*a0*b2^2*b4*b3^2*b1^4+2522520*a0*b2^3*b5*b3*b1^4+315315*a0*b2^4*b6*b1^4-25740*a0*b7*b2^3*b1^5-6930*a2*b5*b4*b1^7-450450*a0*b2*b3*b4^2*b1^5-2310*a1*b6*b4*b1^7-1201200*a2*b3^3*b2*b1^5+138600*a2*b3^2*b4*b1^6+1401400*a0*b3^4*b2*b1^4-200200*a0*b3^3*b4*b1^5+103950*a2*b4^2*b2*b1^6+83160*a1*b5*b4*b2*b1^6+8316*a0*b5^2*b2*b1^6-462*a0*b5*b6*b1^7+75675600*a1*b2^6*b3*b1^2+18918900*a0*b2^6*b4*b1^2-47297250*a1*b2^4*b3^2*b1^3-14189175*a1*b2^5*b4*b1^3-2837835*a0*b2^5*b5*b1^3-91891800*a0*b2^7*b3*b1+75675600*a0*b2^5*b3^2*b1^2-21021000*a0*b2^3*b3^3*b1^3+83160*a5*b2^2*b3*b1^6-4620*a6*b2*b3*b1^7-6930*a5*b2*b4*b1^7-6930*a4*b5*b2*b1^7+55440*a1*b3^2*b5*b1^6+6306300*a3*b2^4*b3*b1^4+4729725*a2*b2^4*b4*b1^4+1891890*a1*b2^4*b5*b1^4-900900*a3*b2^3*b4*b1^5-540540*a2*b2^3*b5*b1^5+55440*a1*b2*b3*b6*b1^6-330*a0*b4*b7*b1^7+8408400*a1*b2^2*b3^3*b1^4-675675*a1*b2^2*b4^2*b1^5+69300*a1*b3*b4^2*b1^6+11880*a1*b7*b2^2*b1^6+1485*a0*b8*b2^2*b1^6-a9*b1^9-23648625*a0*b2^4*b3*b4*b1^3-11550*a4*b4*b3*b1^7+138600*a4*b3^2*b2*b1^6-4620*a3*b6*b2*b1^7-9240*a3*b5*b3*b1^7)/b1^18;
end

if n >= 10
    a10 = fdata(11);
    b11 = gdata(12);
    sigma(11) = -(900900*a4*b4*b3*b2*b1^7-660*a1*b9*b2*b1^8-840840*a0*b3^2*b6*b2*b1^6-654729075*a0*b2^10+200200*a4*b3^3*b1^7+55*a9*b2*b1^9+462*a5*b6*b1^9+330*a4*b7*b1^9-462*a0*b6^2*b1^8+165*a3*b8*b1^9+330*a7*b4*b1^9+75075*a1*b4^3*b1^7+462*a6*b5*b1^9+2837835*a5*b2^5*b1^5+165*a8*b3*b1^9-1401400*a2*b3^4*b1^6-a10*b1^10+540540*a2*b5*b4*b2*b1^7-47297250*a0*b2^4*b4^2*b1^4+4729725*a1*b6*b2^4*b1^5+108108*a1*b5^2*b2*b1^7+63063000*a2*b3^3*b2^2*b1^5+180180*a1*b6*b4*b2*b1^7+45045*a0*b4^2*b5*b1^7-4729725*a2*b4^2*b2^2*b1^6+60060*a0*b4*b6*b3*b1^7+360360*a1*b4*b5*b3*b1^7-45405360*a1*b2^5*b5*b1^4+36036*a0*b5^2*b3*b1^7-378378000*a2*b2^4*b3^2*b1^4-113513400*a2*b2^5*b4*b1^4+321621300*a1*b2^6*b4*b1^3+64324260*a0*b2^6*b5*b1^3-792*a0*b5*b7*b1^8+643242600*a2*b2^6*b3*b1^3+450450*a2*b3*b4^2*b1^7-84084000*a0*b3^4*b2^2*b1^4-12612600*a2*b3^2*b2*b4*b1^6+720720*a3*b5*b3*b2*b1^7+36036*a0*b5*b2*b6*b1^7+6306300*a0*b3*b6*b2^3*b1^5-2522520*a1*b3*b6*b2^2*b1^6+1286485200*a1*b2^5*b3^2*b1^3-413513100*a0*b2^7*b4*b1^2+643242600*a0*b2^5*b4*b3*b1^3-336336000*a1*b2^3*b3^3*b1^4+1964187225*a0*b2^8*b3*b1+63063000*a3*b2^3*b3^2*b1^5-2522520*a3*b2^3*b5*b1^6-3153150*a4*b2^3*b4*b1^6-151351200*a3*b2^5*b3*b1^4+23648625*a3*b2^4*b4*b1^5+14189175*a2*b2^4*b5*b1^5-2522520*a5*b2^3*b3*b1^6+23648625*a4*b2^4*b3*b1^5-378378000*a1*b2^4*b3*b4*b1^4+94594500*a2*b2^3*b4*b3*b1^5+270270*a5*b2^2*b4*b1^7-13860*a6*b2*b4*b1^8-12612600*a3*b2^2*b4*b3*b1^6-9240*a6*b3^2*b1^8-18918900*a4*b2^6*b1^4+a0*b11*b1^9+11*a1*b10*b1^9+55*a2*b9*b1^9+654729075*a1*b2^9*b1-315315*a6*b2^4*b1^6-1485*a8*b2^2*b1^8+25740*a7*b2^3*b1^7-310134825*a2*b2^8*b1^2-8316*a2*b5^2*b1^8-17325*a4*b4^2*b1^8+1401400*a0*b3^5*b1^5-360360*a0*b3*b7*b2^2*b1^6-27720*a5*b3*b4*b1^8-16632*a5*b2*b5*b1^8+360360*a5*b2*b3^2*b1^7+270270*a4*b5*b2^2*b1^7-1929727800*a0*b2^6*b3^2*b1^2+714714000*a0*b2^4*b3^3*b1^3-7567560*a2*b2^2*b5*b3*b1^6+102960*a1*b3*b7*b2*b1^7-13860*a4*b6*b2*b1^8-7920*a3*b7*b2*b1^8-18480*a3*b6*b3*b1^8-495*a0*b4*b8*b1^8+17160*a0*b3^2*b7*b1^7-560560*a0*b3^3*b5*b1^6+12870*a0*b3*b8*b2*b1^7+25740*a0*b4*b7*b2*b1^7+77220*a2*b7*b2^2*b1^7-27720*a4*b5*b3*b1^8-75675600*a0*b2^4*b5*b3*b1^4+37837800*a1*b2^3*b5*b3*b1^5+23648625*a0*b2^2*b4^2*b3*b1^5+21021000*a0*b2*b4*b3^3*b1^5-252252000*a0*b2^3*b4*b3^2*b1^4+94594500*a1*b2^2*b4*b3^2*b1^5+18918900*a0*b3^2*b5*b2^2*b1^5-5045040*a1*b3^2*b5*b2*b1^6+180180*a3*b6*b2^2*b1^7-6306300*a4*b3^2*b2^2*b1^6-3783780*a1*b4*b5*b2^2*b1^6-7567560*a0*b2^5*b6*b1^4-1051050*a0*b3^2*b4^2*b1^6-6306300*a1*b2*b3*b4^2*b1^6-220*a0*b9*b3*b1^8-1980*a1*b8*b3*b1^8+360360*a2*b2*b3*b6*b1^7+360360*a2*b3^2*b5*b1^7-5544*a1*b6*b5*b1^8-3960*a1*b7*b4*b1^8-525525*a0*b2*b4^3*b1^6-378378*a0*b5^2*b2^2*b1^6+9459450*a0*b4*b5*b2^3*b1^5-2522520*a0*b4*b5*b2*b3*b1^6-630630*a0*b4*b6*b2^2*b1^6+19305*a1*b8*b2^2*b1^7+2145*a0*b9*b2^2*b1^7-2970*a2*b8*b2*b1^8-7920*a2*b7*b3*b1^8+91891800*a3*b2^7*b1^3-66*a0*b10*b2*b1^8+23648625*a1*b2^3*b4^2*b1^5-1261260*a2*b6*b2^3*b1^6-5605600*a3*b3^3*b2*b1^6-360360*a1*b7*b2^3*b1^6+600600*a3*b3^2*b4*b1^7+21021000*a1*b3^4*b2*b1^5-2802800*a1*b3^3*b4*b1^6+675675*a0*b2^4*b7*b1^5+450450*a3*b4^2*b2*b1^7-27720*a3*b4*b5*b1^8-1654052400*a1*b2^7*b3*b1^2+180180*a6*b2^2*b3*b1^7-7920*a7*b2*b3*b1^8-45045*a0*b8*b2^3*b1^6-13860*a2*b6*b4*b1^8+120120*a1*b3^2*b6*b1^7)/b1^20;
end

if n >= 11
    warningdata('n too high in hoi_asy_sigma');
end

